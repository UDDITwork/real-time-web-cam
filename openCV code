import cv2
import numpy as np

# Load the pre-trained model
net = cv2.dnn.readNet("yolov3.weights", "yolov3.cfg")
layer_names = net.getLayerNames()
output_layers = [layer_names[i[0] - 1] for i in net.getUnconnectedOutLayers()]

# Initialize variables
people_inside = []
people_count = 0

# Capture video from the camera
cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    if not ret:
        break

    height, width, channels = frame.shape

    # Detect objects (people) in the frame
    blob = cv2.dnn.blobFromImage(frame, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
    net.setInput(blob)
    outs = net.forward(output_layers)

    # Process the detected objects
    for out in outs:
        for detection in out:
            scores = detection[5:]
            class_id = np.argmax(scores)
            confidence = scores[class_id]
            if confidence > 0.5 and class_id == 0:  # Class ID 0 is for people
                # Extract bounding box coordinates
                center_x = int(detection[0] * width)
                center_y = int(detection[1] * height)
                w = int(detection[2] * width)
                h = int(detection[3] * height)

                # Check if the center of the bounding box is in the region of interest
                # You can define your own region of interest (ROI) here
                # For simplicity, let's assume the ROI is the center of the frame
                roi_center_x = width // 2
                roi_center_y = height // 2
                roi_width = 100
                roi_height = 100

                if (roi_center_x - roi_width // 2 <= center_x <= roi_center_x + roi_width // 2) and (
                        roi_center_y - roi_height // 2 <= center_y <= roi_center_y + roi_height // 2):
                    # Check if this person is already inside the region
                    tracked = False
                    for person_id, (prev_x, prev_y) in people_inside:
                        if abs(prev_x - center_x) < 50 and abs(prev_y - center_y) < 50:
                            # Same person, update the count based on user's choice
                            tracked = True
                            count = 2 if input("Count same person multiple times? (y/n): ") == 'y' else 1
                            people_count += count
                            people_inside.remove((person_id, (prev_x, prev_y)))
                            break

                    if not tracked:
                        # New person entering the region
                        people_inside.append((len(people_inside), (center_x, center_y)))
                        people_count += 1

    # Display the count
    cv2.putText(frame, f"People count: {people_count}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
    cv2.imshow("Frame", frame)

    key = cv2.waitKey(1)
    if key == 27:  # Press Esc to exit
        break

cap.release()
cv2.destroyAllWindows()
